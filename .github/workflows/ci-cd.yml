name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

env:
  PROJECT_ID: ${{ vars.PROJECT_ID }}
  GKE_CLUSTER: ${{ vars.GKE_CLUSTER }}
  GKE_ZONE: ${{ vars.GKE_ZONE }}
  REGISTRY: ${{ vars.REGISTRY }}
  IMAGE: ${{ vars.IMAGE }}
  DEPLOYMENT_NAME: ${{ vars.DEPLOYMENT_NAME }}

jobs:
  deploy:
    name: Setup, Build, and Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up GCP credentials
      run: echo '${{ secrets.GCP_SA_KEY }}' > gcp-key.json

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ env.PROJECT_ID }}

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Configure Docker
      run: gcloud --quiet auth configure-docker us-central1-docker.pkg.dev

    - name: Get GKE credentials
      uses: google-github-actions/get-gke-credentials@v1
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}

    - name: Build Docker image
      run: |
        docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE }}:$GITHUB_SHA .
        docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE }}:latest .

    - name: Push Docker image
      run: |
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE }}:$GITHUB_SHA
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE }}:latest

    - name: Update Helm chart values
      run: |
        sed -i 's|tag: .*|tag: "'$GITHUB_SHA'"|g' portfolio-helm/values.yaml

    - name: Deploy to GKE
      run: |
        helm upgrade --install ${{ env.DEPLOYMENT_NAME }} ./portfolio-helm \
          --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE }} \
          --set image.tag=$GITHUB_SHA \
          --namespace default

    - name: Wait for deployment
      run: |
        kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }} -n default --timeout=5m

    - name: Verify deployment
      run: |
        kubectl get pods -l app.kubernetes.io/name=portfolio
        kubectl describe ingress portfolio
        kubectl get services

    - name: Clean up credentials
      if: always()
      run: rm -f gcp-key.json
